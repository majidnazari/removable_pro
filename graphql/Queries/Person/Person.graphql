
getPerson(id: ID!): Person @guard(with: ["api"]) @throttle(max: 10, decay: 1) @field(resolver: "App\\GraphQL\\Queries\\Person\\GetPerson@resolvePerson") 
getPersonDynamicDepth(id: ID!,depth: Int!): Person @guard(with: ["api"]) @throttle(max: 10, decay: 1) @field(resolver: "App\\GraphQL\\Queries\\Person\\GetPerson@resolvePersonByDepth") 
getPersons(
        first: Int, 
        page: Int, 
        creator_id: Int,
        editor_id: Int,
        node_code: String,
        first_name: String,
        last_name: String,
        birth_date: String,
        death_date: String,
        country_code: String,
        mobile: String,

        is_owner: Int,

        gender: Int,
       
        status: Status,

        orderBy:[OrderByClause!] @orderBy
        # filter: PersonFilterInput
    ): [Person!]! @guard(with: ["api"])  @throttle(max: 10, decay: 1) @paginate(builder: "App\\GraphQL\\Queries\\Person\\GetPersons@resolvePerson")

# getPersonFatherOfFather(id: ID!): Person @throttle(max: 10, decay: 1) @guard(with: ["api"])
# @validator(class: "App\\GraphQL\\Validators\\Person\\PersonInputValidator") 
# @field(resolver: "App\\GraphQL\\Queries\\Person\\GetPerson@resolvePersonFatherOfFather") 

# getPersonFatherOfMother(id: ID! ): Person  @throttle(max: 10, decay: 1) @guard(with: ["api"])
# @validator(class: "App\\GraphQL\\Validators\\Person\\PersonInputValidator") 
#  @field(resolver: "App\\GraphQL\\Queries\\Person\\GetPerson@resolvePersonFatherOfMother") 
    


 getPersonAncestryWithActiveMerge( user_id:ID ,depth: Int!): AncestryTree @guard(with: ["api"])  @throttle(max: 10, decay: 1) @field(resolver: "App\\GraphQL\\Queries\\Person\\GetPerson@resolvePersonAncestryWithActiveMerge")
 getPersonAncestryWithCompleteMerge( user_id:ID ,depth: Int!): AncestryTrees @guard(with: ["api"]) @throttle(max: 10, decay: 1) @field(resolver: "App\\GraphQL\\Queries\\Person\\GetPerson@resolvePersonAncestryWithCompleteMerge")