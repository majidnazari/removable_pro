type UserMergeRequest {

    id: ID!
    creator_id: ID
    editor_id: ID

    user_sender_id: ID!
    node_sender_id: ID!

    user_reciver_id: ID!
    request_status_sender: RequestStatusSender
    request_sender_expired_at: String
    request_status_reciver: RequestStatusReciver

    merge_ids_sender: String
    merge_ids_reciver: String


    merge_status_sender: RequestStatusSender
    merge_sender_expired_at: String
    merge_status_reciver: RequestStatusReciver

    created_at: String
    updated_at: String
}


input CreateUserMergeRequestInput {

    # user_sender_id: ID!
    node_sender_id: ID!

    user_reciver_id: ID!

    request_status_sender: RequestStatusSender
    request_sender_expired_at: String
    request_status_reciver: RequestStatusReciver

}

input SendRequestToOtherFamilyInput @validator(class: "App\\GraphQL\\Validators\\UserMergeRequest\\SendRequestToOtherFamilyInputValidator")
{

    # user_sender_id: ID!
    node_sender_id: ID!
   
}
input UpdateRequestSenderInput {

    request_status_sender: RequestStatusSender
   
}

input UpdateRequestReciverInput {

    request_status_sender: RequestStatusSender
   
}
input UpdateRequestReciverInput {

   request_status_reciver: RequestStatusReciver
   
}

input UpdateUserMergeRequestInput {

    id: ID!
   
    merge_ids_sender: String
    merge_ids_reciver: String

    merge_status_sender: RequestStatusSender
    merge_sender_expired_at: String
    
}

input UpdateUserMergeRequestAllInput {

    id: ID!
    # user_sender_id: ID!
    node_sender_id: ID!

    user_reciver_id: ID!
    request_status_sender: RequestStatusSender
    request_sender_expired_at: String
    request_status_reciver: RequestStatusReciver

    merge_ids_sender: String
    merge_ids_reciver: String


    merge_status_sender: RequestStatusSender
    merge_sender_expired_at: String
    merge_status_reciver: RequestStatusReciver
}
